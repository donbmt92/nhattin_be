import { Injectable, CanActivate, ExecutionContext, BadRequestException } from '@nestjs/common';
import { ReferralService } from '../referral.service';

@Injectable()
export class FraudPreventionGuard implements CanActivate {
  constructor(private readonly referralService: ReferralService) {}

  async canActivate(context: ExecutionContext): Promise<boolean> {
    const request = context.switchToHttp().getRequest();
    const affiliateId = request.user?.id;
    
    if (!affiliateId) return true;
    
    // üî• IMPLEMENTED: Fraud prevention logic
    await this.checkReferralLimit(affiliateId);
    await this.checkSuspiciousPatterns(affiliateId);
    await this.checkIPAddress(request);
    
    return true;
  }

  /**
   * Ki·ªÉm tra gi·ªõi h·∫°n s·ªë l∆∞·ª£ng referrals trong 24h
   */
  private async checkReferralLimit(affiliateId: string): Promise<void> {
    const recentReferrals = await this.referralService.countRecentReferrals(
      affiliateId, 
      24 * 60 * 60 * 1000 // 24 gi·ªù
    );
    
    if (recentReferrals > 10) {
      throw new BadRequestException('Qu√° nhi·ªÅu referrals trong 24h, vui l√≤ng th·ª≠ l·∫°i sau');
    }
  }

  /**
   * Ki·ªÉm tra c√°c pattern ƒë√°ng ng·ªù
   */
  private async checkSuspiciousPatterns(affiliateId: string): Promise<void> {
    const recentReferrals = await this.referralService.getRecentReferrals(
      affiliateId, 
      24 * 60 * 60 * 1000
    );
    
    // Ki·ªÉm tra referrals ƒë∆∞·ª£c t·∫°o qu√° nhanh (m·ªói gi√¢y)
    const suspiciousTiming = this.checkReferralTiming(recentReferrals);
    if (suspiciousTiming) {
      throw new BadRequestException('Referrals ƒë∆∞·ª£c t·∫°o qu√° nhanh, c√≥ th·ªÉ l√† bot');
    }
    
    // Ki·ªÉm tra pattern email/phone ƒë√°ng ng·ªù
    const suspiciousData = this.checkReferralData(recentReferrals);
    if (suspiciousData) {
      throw new BadRequestException('D·ªØ li·ªáu referrals c√≥ pattern ƒë√°ng ng·ªù');
    }
  }

  /**
   * Ki·ªÉm tra IP address
   */
  private async checkIPAddress(request: any): Promise<void> {
    const clientIP = request.ip || request.connection.remoteAddress;
    
    // Ki·ªÉm tra IP t·ª´ data center (c√≥ th·ªÉ l√† bot)
    if (this.isDataCenterIP(clientIP)) {
      throw new BadRequestException('IP address t·ª´ data center kh√¥ng ƒë∆∞·ª£c ph√©p');
    }
    
    // Ki·ªÉm tra IP t·ª´ n∆∞·ªõc ngo√†i (c√≥ th·ªÉ l√† VPN)
    if (this.isForeignIP(clientIP)) {
      console.warn(`Suspicious IP detected: ${clientIP} from foreign country`);
      // Kh√¥ng block ngay, ch·ªâ log warning
    }
  }

  /**
   * Ki·ªÉm tra timing c·ªßa referrals
   */
  private checkReferralTiming(referrals: any[]): boolean {
    if (referrals.length < 2) return false;
    
    // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o
    const sortedReferrals = referrals.sort((a, b) => 
      new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime()
    );
    
    // Ki·ªÉm tra c√≥ referrals n√†o ƒë∆∞·ª£c t·∫°o c√°ch nhau < 5 gi√¢y kh√¥ng
    for (let i = 1; i < sortedReferrals.length; i++) {
      const timeDiff = new Date(sortedReferrals[i].createdAt).getTime() - 
                      new Date(sortedReferrals[i-1].createdAt).getTime();
      
      if (timeDiff < 5000) { // 5 gi√¢y
        return true; // Suspicious
      }
    }
    
    return false;
  }

  /**
   * Ki·ªÉm tra d·ªØ li·ªáu referrals
   */
  private checkReferralData(referrals: any[]): boolean {
    if (referrals.length < 2) return false;
    
    // Ki·ªÉm tra t·∫•t c·∫£ referrals c√≥ c√πng pattern email kh√¥ng
    const emailPatterns = referrals.map(r => {
      const email = r.referredUserEmail;
      return email.split('@')[0]; // Ph·∫ßn tr∆∞·ªõc @
    });
    
    const uniquePatterns = new Set(emailPatterns);
    if (uniquePatterns.size === 1 && referrals.length > 3) {
      return true; // Suspicious - t·∫•t c·∫£ c√πng pattern
    }
    
    // Ki·ªÉm tra phone numbers c√≥ pattern ƒë√°ng ng·ªù
    const phonePatterns = referrals.map(r => {
      const phone = r.referredUserPhone;
      return phone.replace(/\D/g, ''); // Ch·ªâ gi·ªØ s·ªë
    });
    
    // Ki·ªÉm tra c√≥ phone numbers li√™n ti·∫øp kh√¥ng
    const sortedPhones = phonePatterns.sort();
    for (let i = 1; i < sortedPhones.length; i++) {
      const current = parseInt(sortedPhones[i]);
      const previous = parseInt(sortedPhones[i-1]);
      
      if (current - previous === 1) {
        return true; // Suspicious - phone numbers li√™n ti·∫øp
      }
    }
    
    return false;
  }

  /**
   * Ki·ªÉm tra IP c√≥ ph·∫£i t·ª´ data center kh√¥ng
   */
  private isDataCenterIP(ip: string): boolean {
    // Danh s√°ch c√°c IP ranges c·ªßa data centers ph·ªï bi·∫øn
    const dataCenterRanges = [
      '10.0.0.0/8',      // Private network
      '172.16.0.0/12',   // Private network  
      '192.168.0.0/16',  // Private network
      '169.254.0.0/16',  // Link-local
    ];
    
    // Ki·ªÉm tra IP c√≥ trong ranges n√†y kh√¥ng
    return dataCenterRanges.some(range => this.ipInRange(ip, range));
  }

  /**
   * Ki·ªÉm tra IP c√≥ ph·∫£i t·ª´ n∆∞·ªõc ngo√†i kh√¥ng
   */
  private isForeignIP(ip: string): boolean {
    // Danh s√°ch IP ranges c·ªßa Vi·ªát Nam (c√≥ th·ªÉ m·ªü r·ªông)
    const vietnamRanges = [
      '113.160.0.0/13',   // VNPT
      '115.72.0.0/13',    // FPT
      '117.0.0.0/13',     // Viettel
      '125.234.0.0/15',   // VNPT
      '203.162.0.0/16',   // VNPT
    ];
    
    // N·∫øu IP kh√¥ng thu·ªôc VN ranges ‚Üí c√≥ th·ªÉ l√† foreign
    return !vietnamRanges.some(range => this.ipInRange(ip, range));
  }

  /**
   * Ki·ªÉm tra IP c√≥ trong range kh√¥ng
   */
  private ipInRange(ip: string, range: string): boolean {
    // Simple implementation - c√≥ th·ªÉ d√πng th∆∞ vi·ªán chuy√™n d·ª•ng
    const [rangeIP, mask] = range.split('/');
    const maskNum = parseInt(mask);
    
    // Convert IP to number
    const ipNum = this.ipToNumber(ip);
    const rangeNum = this.ipToNumber(rangeIP);
    
    // Check if IP is in range
    const maskValue = Math.pow(2, 32 - maskNum) - 1;
    return (ipNum & maskValue) === (rangeNum & maskValue);
  }

  /**
   * Convert IP string to number
   */
  private ipToNumber(ip: string): number {
    return ip.split('.').reduce((acc, octet) => 
      (acc << 8) + parseInt(octet), 0
    ) >>> 0;
  }
}
